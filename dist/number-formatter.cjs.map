{"version":3,"file":"number-formatter.cjs","sources":["../src/index.ts"],"sourcesContent":["import _ from \"lodash\";\n\nexport function removeLeadingHyphen(s: string): string {\n    return s.replace(/^-/, \"\");\n}\n\nexport type FormattingOptions = {\n    fractionDigits?: number;\n    minFractionDigits?: number;\n    currencySign?: string;\n    endSign?: string;\n    showPlusSign?: boolean;\n};\n\nexport const PercentChangeFormatting = {\n    fractionDigits: 2,\n    showPlusSign: true,\n    endSign: \"%\",\n};\n\nexport const UsdFormatting = {\n    fractionDigits: 2,\n    currencySign: \"$\",\n};\n\nexport const PercentFormatting = {\n    fractionDigits: 0,\n    endSign: \"%\",\n};\n\nexport const CryptoFormatting = {\n    fractionDigits: 4,\n    minFractionDigits: 2,\n};\n\nexport function formatNumberAmount(\n    amount: number | undefined,\n    {\n        fractionDigits = 2,\n        minFractionDigits = 2,\n        currencySign = \"\",\n        endSign = \"\",\n        showPlusSign = false,\n    }: FormattingOptions\n): string {\n    if (amount === undefined || amount === null) return \"\";\n\n    const leadingZeros = _.takeWhile(\n        String(amount),\n        (c) => c === \"0\" || c === \".\"\n    ).length;\n    if (leadingZeros > 3) {\n        fractionDigits = leadingZeros;\n    }\n\n    let numberAsString = amount.toLocaleString(undefined, {\n        minimumFractionDigits: Math.min(minFractionDigits, fractionDigits),\n        maximumFractionDigits: fractionDigits,\n    });\n\n    if (currencySign) {\n        numberAsString =\n            amount < 0\n                ? `-$${removeLeadingHyphen(numberAsString)}`\n                : `$${numberAsString}`;\n    }\n\n    if (showPlusSign && amount > 0) {\n        numberAsString = `+${numberAsString}`;\n    }\n\n    if (endSign) {\n        numberAsString = `${numberAsString} ${endSign}`;\n    }\n\n    return numberAsString;\n}\n\nexport function formatStringAmount(\n    amount: string,\n    options: FormattingOptions\n): string {\n    if (!amount) return \"\";\n\n    return formatNumberAmount(parseFloat(amount), options);\n}\n"],"names":["removeLeadingHyphen","s","replace","formatNumberAmount","amount","_ref","_ref$fractionDigits","fractionDigits","_ref$minFractionDigit","minFractionDigits","_ref$currencySign","currencySign","_ref$endSign","endSign","_ref$showPlusSign","showPlusSign","leadingZeros","_","takeWhile","String","c","length","numberAsString","toLocaleString","undefined","minimumFractionDigits","Math","min","maximumFractionDigits","options","parseFloat"],"mappings":"gHAEgB,SAAAA,EAAoBC,GAChC,OAAOA,EAAEC,QAAQ,KAAM,GAC3B,CA+BM,SAAUC,EACZC,EAA0BC,GAON,IAAAC,EAAAD,EALhBE,eAAAA,OAAc,IAAAD,EAAG,EAACA,EAAAE,EAAAH,EAClBI,kBAAAA,OAAoB,IAAHD,EAAG,EAACA,EAAAE,EAAAL,EACrBM,aAAAA,WAAYD,EAAG,GAAEA,EAAAE,EAAAP,EACjBQ,QAAAA,OAAO,IAAAD,EAAG,GAAEA,EAAAE,EAAAT,EACZU,aAAAA,OAAe,IAAHD,GAAQA,EAGxB,GAAIV,QAAyC,MAAO,GAEpD,IAAMY,EAAeC,EAAAA,QAAEC,UACnBC,OAAOf,GACP,SAACgB,SAAY,MAANA,GAAmB,MAANA,CAAS,GAC/BC,OACEL,EAAe,IACfT,EAAiBS,GAGrB,IAAIM,EAAiBlB,EAAOmB,oBAAeC,EAAW,CAClDC,sBAAuBC,KAAKC,IAAIlB,EAAmBF,GACnDqB,sBAAuBrB,IAkB3B,OAfII,IACAW,EACIlB,EAAS,OACEJ,EAAoBsB,OACrBA,GAGdP,GAAgBX,EAAS,IACzBkB,EAAc,IAAOA,GAGrBT,IACAS,EAAoBA,EAAc,IAAIT,GAGnCS,CACX,0BA9CgC,CAC5Bf,eAAgB,EAChBE,kBAAmB,mCAlBgB,CACnCF,eAAgB,EAChBQ,cAAc,EACdF,QAAS,+BAQoB,CAC7BN,eAAgB,EAChBM,QAAS,2BAPgB,CACzBN,eAAgB,EAChBI,aAAc,sEAyDdP,EACAyB,GAEA,OAAKzB,EAEED,EAAmB2B,WAAW1B,GAASyB,GAF1B,EAGxB"}