{"version":3,"file":"number-formatter.modern.js","sources":["../src/index.ts"],"sourcesContent":["import _ from \"lodash\";\n\nexport function removeLeadingHyphen(s: string): string {\n    return s.replace(/^-/, \"\");\n}\n\nexport type FormattingOptions = {\n    fractionDigits?: number;\n    minFractionDigits?: number;\n    currencySign?: string;\n    endSign?: string;\n    showPlusSign?: boolean;\n};\n\nexport const PercentChangeFormatting = {\n    fractionDigits: 2,\n    showPlusSign: true,\n    endSign: \"%\",\n};\n\nexport const UsdFormatting = {\n    fractionDigits: 2,\n    currencySign: \"$\",\n};\n\nexport const PercentFormatting = {\n    fractionDigits: 0,\n    endSign: \"%\",\n};\n\nexport const CryptoFormatting = {\n    fractionDigits: 4,\n    minFractionDigits: 2,\n};\n\nexport function formatNumberAmount(\n    amount: number | undefined,\n    {\n        fractionDigits = 2,\n        minFractionDigits = 2,\n        currencySign = \"\",\n        endSign = \"\",\n        showPlusSign = false,\n    }: FormattingOptions\n): string {\n    if (amount === undefined || amount === null) return \"\";\n\n    const leadingZeros = _.takeWhile(\n        String(amount),\n        (c) => c === \"0\" || c === \".\"\n    ).length;\n    if (leadingZeros > 3) {\n        fractionDigits = leadingZeros;\n    }\n\n    let numberAsString = amount.toLocaleString(undefined, {\n        minimumFractionDigits: Math.min(minFractionDigits, fractionDigits),\n        maximumFractionDigits: fractionDigits,\n    });\n\n    if (currencySign) {\n        numberAsString =\n            amount < 0\n                ? `-$${removeLeadingHyphen(numberAsString)}`\n                : `$${numberAsString}`;\n    }\n\n    if (showPlusSign && amount > 0) {\n        numberAsString = `+${numberAsString}`;\n    }\n\n    if (endSign) {\n        numberAsString = `${numberAsString} ${endSign}`;\n    }\n\n    return numberAsString;\n}\n\nexport function formatStringAmount(\n    amount: string,\n    options: FormattingOptions\n): string {\n    if (!amount) return \"\";\n\n    return formatNumberAmount(parseFloat(amount), options);\n}\n"],"names":["removeLeadingHyphen","s","replace","PercentChangeFormatting","fractionDigits","showPlusSign","endSign","UsdFormatting","currencySign","PercentFormatting","CryptoFormatting","minFractionDigits","formatNumberAmount","amount","leadingZeros","_","takeWhile","String","c","length","numberAsString","toLocaleString","undefined","minimumFractionDigits","Math","min","maximumFractionDigits","formatStringAmount","options","parseFloat"],"mappings":"sBAEgB,SAAAA,EAAoBC,GAChC,OAAOA,EAAEC,QAAQ,KAAM,GAC3B,CAUa,MAAAC,EAA0B,CACnCC,eAAgB,EAChBC,cAAc,EACdC,QAAS,KAGAC,EAAgB,CACzBH,eAAgB,EAChBI,aAAc,KAGLC,EAAoB,CAC7BL,eAAgB,EAChBE,QAAS,KAGAI,EAAmB,CAC5BN,eAAgB,EAChBO,kBAAmB,GAGjB,SAAUC,EACZC,GACAT,eACIA,EAAiB,EAACO,kBAClBA,EAAoB,EAACH,aACrBA,EAAe,GAAEF,QACjBA,EAAU,GAAED,aACZA,GAAe,IAGnB,GAAIQ,QAAyC,MAAO,GAEpD,MAAMC,EAAeC,EAAEC,UACnBC,OAAOJ,GACNK,GAAY,MAANA,GAAmB,MAANA,GACtBC,OACEL,EAAe,IACfV,EAAiBU,GAGrB,IAAIM,EAAiBP,EAAOQ,oBAAeC,EAAW,CAClDC,sBAAuBC,KAAKC,IAAId,EAAmBP,GACnDsB,sBAAuBtB,IAkB3B,OAfII,IACAY,EACIP,EAAS,EACE,KAAAb,EAAoBoB,KACzB,IAAIA,KAGdf,GAAgBQ,EAAS,IACzBO,EAAiB,IAAIA,KAGrBd,IACAc,EAAoB,GAAAA,KAAkBd,KAGnCc,CACX,CAEgB,SAAAO,EACZd,EACAe,GAEA,OAAKf,EAEED,EAAmBiB,WAAWhB,GAASe,GAF1B,EAGxB"}